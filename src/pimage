#!/usr/bin/env python3

'''pimage

Manage Raspberry PI Gentoo Linux images.

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.
This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see <http://www.gnu.org/licenses/>.
'''

import argparse
import datetime
import glob
import json
import os
import pty
import re
import shutil
import subprocess
import sys
import tempfile
import urllib.request

import bs4

__author__ = 'Antonio Serrano Hernandez'
__copyright__ = 'Copyright 2021'
__license__ = 'GPLv3'
__version__ = '0.1'
__email__ = 'toni.serranoh@gmail.com'
__status__ = 'Development'
__script__ = 'pimage'


DEFAULT_DATADIR = '/usr/local/var/lib/pimage'
DEFAULT_STATICDIR = '/usr/local/share/pimage'

def _info(msg):
    '''Print a message to stderr.'''
    print(msg, file=sys.stderr)

class Application:
    '''Entry point.'''

    def __init__(self):
        self._args = self._parseargs()
        self._service_interface = ServiceInterface(self._args)

    def _parseargs(self):
        parser = argparse.ArgumentParser(
            description='Manage Raspberry PI Gentoo Linux images.',
            prog=__script__)
        parser.add_argument('-d', '--data', default=DEFAULT_DATADIR,
            help='data directory.')
        parser.add_argument('-s', '--static-dir', default=DEFAULT_STATICDIR,
            help='static files directory')
        parser.add_argument('--version', action='version',
            version=f'%(prog)s {__version__}')
        subparsers = parser.add_subparsers(title='commands')

        create = subparsers.add_parser(
            'create', help='Create a new Raspberry PI image')
        create.add_argument('name', help='name of the image to create')
        create.add_argument('-a', '--arch', default='armv6j',
            help='architecture of the newly created image')
        create.set_defaults(func=self._create)

        delete = subparsers.add_parser(
            'delete', help='delete an existing image')
        delete.add_argument('image', help='image to delete')
        delete.add_argument('-f', '--force', action='store_true',
            help="don't ask for confirmation")
        delete.set_defaults(func=self._delete)

        fork = subparsers.add_parser('fork', help='fork an existing image')
        fork.add_argument('image', help='image to fork')
        fork.add_argument('newimage', help='new image to create')
        fork.set_defaults(func=self._fork)

        install = subparsers.add_parser(
            'install', help='install an existing image to a given device')
        install.add_argument('image', help='image to install')
        install.add_argument(
            'device', help='device where to install the image')
        install.add_argument('-f', '--force', action='store_true',
            help="don't ask for confirmation")
        install.set_defaults(func=self._install)

        list_ = subparsers.add_parser('list', help='list Raspberry PI images')
        list_.set_defaults(func=self._list)

        chroot = subparsers.add_parser(
            'chroot', help='chroot into the given image')
        chroot.add_argument('image', help='image to chroot into')
        chroot.set_defaults(func=self._chroot)

        rename = subparsers.add_parser('rename', help='rename an image')
        rename.add_argument('image', help='image to rename')
        rename.add_argument('newname', help='new name of the image')
        rename.set_defaults(func=self._rename)

        return parser.parse_args()

    def _chroot(self, args):
        '''Chroot into the given Raspberry PI image.'''
        self._service_interface.chroot(args.image)

    def _create(self, args):
        '''Create a new Raspberry PI image.'''
        self._service_interface.create(args.name, args.arch)

    def _delete(self, args):
        '''Delete an existing image.'''
        self._service_interface.delete(args.image, args.force)

    def _fork(self, args):
        '''Fork an existing image.'''
        self._service_interface.fork(args.image, args.newimage)

    def _install(self, args):
        '''Install the given image.'''
        self._service_interface.install(args.image, args.device)

    def _list(self, args):
        '''List Raspberry PI images.'''
        self._service_interface.list()

    def _rename(self, args):
        '''Rename an image.'''
        self._service_interface.rename(args.image, args.newname)

    def main(self):
        '''Main function.''' 
        self._args.func(self._args)   

class ServiceInterface:
    '''An interface with the Raspberry PI image manager.'''

    def __init__(self, args):
        self._rpifiles = RpiFiles(os.path.join(args.data, 'firmware'))
        self._gentoofiles = GentooFiles(os.path.join(args.data, 'gentoo'))
        self._image_manager = ImageManager(
            args.data, args.static_dir, self._rpifiles, self._gentoofiles)

    def _asroot(f):
        '''Execute the given function only if the current user is root.'''
        def execute_if_root(*args):
            if os.geteuid() == 0:
                f(*args)
            else:
                _info('error: you must have root permissions '
                    'to perform this action')
        return execute_if_root

    @_asroot
    def chroot(self, image):
        '''Chroot into the given image.'''
        try:
            self._image_manager.chroot(image)
        except ValueError as e:
            _info(f'error: {e}')

    @_asroot
    def create(self, name, arch):
        '''Create a Raspberry PI image with the given name and architecture.'''
        try:
            self._image_manager.create(name, arch)
        except ValueError as e:
            _info(f'error: {e}')

    def delete(self, image, force=False):
        '''Delete a given Raspberry PI image.'''
        confirm = 'y' if force else input('are you sure? (y/[n]) ')
        if confirm == 'y':
            try:
                self._image_manager.delete(image)
            except ValueError as e:
                _info(f'error: {e}')

    @_asroot
    def fork(self, src, dst):
        '''Fork an image.'''
        try:
            self._image_manager.fork(src, dst)
        except ValueError as e:
            _info(f'error: {e}')

    @_asroot
    def install(self, image, device, force=False):
        '''Install the given image onto the given device.'''
        # Ask for confirmation to partition the device
        confirm = 'y' if force else input(f'WARNING!! all data in device '
            f'{device} will be destroyed, are you sure? (y/[n]) ')
        if confirm == 'y':
            try:
                self._image_manager.install(image, device)
            except RuntimeError as e:
                _info(f'error: {e}')
        else:
            _info('aborting')

    def list(self):
        '''List the available Raspberry PI images.'''
        self._image_manager.list()

    @_asroot
    def rename(self, image, newname):
        '''Rename an existing image.'''
        try:
            self._image_manager.rename(image, newname)
        except ValueError as e:
            _info(f'error: {e}')

class ImageManager:
    '''Manages the Raspberry PI images.'''

    _ARM_EXEC_TAG = (r':arm:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00'
        r'\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff'
        r'\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-arm:')

    def __init__(self, datadir, staticdir, rpifiles, gentoofiles):
        self._datadir = datadir
        self._staticdir = staticdir
        self._rpifiles = rpifiles
        self._gentoofiles = gentoofiles
        self._load_images()

    def chroot(self, image):
        '''Chroot into the given image.'''
        try:
            # Get the image
            img = self._images[image]

            # Build some paths in the image
            imgdev = os.path.join(img.rootpath, 'dev')
            imgproc = os.path.join(img.rootpath, 'proc')
            imgsys = os.path.join(img.rootpath, 'sys')
            imgdevpts = os.path.join(img.rootpath, 'dev', 'pts')
            bootdir = os.path.join(img.rootpath, 'boot')

            # Options to mount devpts
            opts = ['rw', 'nosuid', 'noexec', 'relatime', 'gid=5', 'mode=620',
                'ptmxmode=000']

            # Register ARM executable format
            self._register_executable()

            # Mount portage tree
            with Mount(self._gentoofiles.portagedir, img.portagedir,
                    options=['bind'], lazy=True):
                # Mount distfiles
                with Mount(self._gentoofiles.distfilesdir, img.distfilesdir,
                        options=['bind'], lazy=True):
                    # Mount binpkg
                    with Mount(self._gentoofiles.binpkgdir, img.binpkgdir,
                            options=['bind']):
                        # Mount boot
                        with Mount(img.bootpath, bootdir, options=['bind']):
                            # Mount dev filesystem                        
                            with Mount('/dev', imgdev, options=['bind']):
                                # Mount proc filesystem
                                with Mount('/proc', imgproc, options=['bind']):
                                    # Mount sys filesystem                    
                                    with Mount('/sys', imgsys,
                                            options=['bind']):
                                        # Mount devpts filesystem
                                        with Mount('devpts', imgdevpts,
                                                lazy=True, options=opts,
                                                type='devpts',):
                                            # Copy DNS info
                                            self._copy_dns_info(img)
                                            # Chroot
                                            pty.spawn(['chroot', img.rootpath])
        except KeyError:
            raise ValueError(f"unknown image '{image}'")

    def create(self, name, arch):
        '''Create a Raspberry PI image with the given name and architecture.'''
        if name in self._images:
            raise ValueError('an image with the given name already exists')
        else:
            # Instantiate the image
            imagesdir = os.path.join(self._datadir, 'images')
            if not os.path.exists(imagesdir):
                os.mkdir(imagesdir)
            image = Image(name, arch, os.path.join(imagesdir, name))

            try:
                # Create the image directories
                image.mkdirs()

                # Install the firmware
                self._rpifiles.install_firmware(image.bootpath)

                # Record the version of the installed firmware
                tag, id_ = self._rpifiles.current_firmware
                image.set_firmware_version(tag)

                # Install the root tree
                self._gentoofiles.install_stage3(image.arch, image.rootpath)

                # Install modules
                self._rpifiles.install_modules(image.rootpath)

                # Copy repos files
                self._setup_repos(image)

                # Install qemu ARM binary
                self._install_qemu(image)

                # Save the image
                self._images[name] = image
                self._save_images()
            except Exception:
                # Remove the image
                image.remove()
                raise

    def delete(self, image):
        '''Delete the given image.'''
        try:
            self._images[image].remove()
            del self._images[image]
            self._save_images()
        except KeyError:
            raise ValueError(f"unknown image '{image}'")

    def fork(self, src, dst):
        '''Fork and image.'''
        if dst in self._images:
            raise ValueError(f"an image with name '{newname}' already exists")
        try:
            oldimage = self._images[src]
            newimage = oldimage.clone()
            newimage.rename(dst)
            self._images[dst] = newimage
            _info('copying files')
            shutil.copytree(oldimage.path, newimage.path, symlinks=True)
            self._save_images()
        except KeyError:
            raise ValueError(f"unknown image '{image}'")

    def install(self, image, device):
        '''Install the image onto the given device.'''
        try:
            # Get the image
            img = self._images[image]

            # Partition the device
            self._partition(device)

            # Create the filesystems in the device's partitions
            self._create_filesystems(device)

            # Mount the partitions
            with tempfile.TemporaryDirectory() as tmpboot:
                with tempfile.TemporaryDirectory() as tmproot:
                    with Mount(f'{device}1', tmpboot, lazy=True):
                        with Mount(f'{device}3', tmproot, lazy=True):
                            # Copy files
                            self._copy_files(img, tmpboot, tmproot)
        except KeyError:
            raise ValueError(f"unknown image '{image}'")

    def list(self):
        '''List the available Raspberry PI images.'''
        self._print_header()
        for image in self._images.values():
            self._print_image(image)

    def rename(self, image, newname):
        '''Rename the given image with the new name.'''
        if newname in self._images:
            raise ValueError(f"an image with name '{newname}' already exists")
        try:
            self._images[image].rename(newname, rename_path=True)
            self._save_images()
        except KeyError:
            raise ValueError(f"unknown image '{image}'")

    @property
    def _images_file(self):
        '''Return the path to the images file.'''
        return os.path.join(self._datadir, 'images.json')

    def _setup_repos(self, image):
        '''Copy the template repos file to the final location.'''
        reposdir = os.path.join(image.rootpath, 'etc', 'portage', 'repos.conf')
        try:
            os.mkdir(reposdir)
        except OSError: pass
        src = os.path.join(
            image.rootpath, 'usr', 'share', 'portage', 'config', 'repos.conf')
        dst = os.path.join(reposdir, 'gentoo.conf')
        shutil.copy(src, dst)

    def _install_qemu(self, image):
        '''Install the qemu ARM binary to the newly created image.'''
        # Copy the qemu-arm binary to the target image
        src = os.path.join(self._staticdir, 'qemu', 'qemu-arm')
        dst = os.path.join(image.rootpath, 'usr', 'bin', 'qemu-arm')
        shutil.copy(src, dst)

        # Tune the make.conf of the target image to avoid known problems
        makeconf = os.path.join(image.rootpath, 'etc', 'portage', 'make.conf')
        with open(makeconf, 'a') as f:
            f.write('\nFEATURES="-pid-sandbox -network-sandbox -sandbox '
                '-usersandbox buildpkg"\n')

    def _print_header(self):
        '''Print the header for the list of images.'''
        print(f'{"name":20s}{"arch":10s}{"created":22s}{"firmware":15s}'
            f'{"parent":20s}')

    def _print_image(self, image):
        '''Print a line of information of the given image.'''
        print(f'{image.name:20s}{image.arch:10s}'
            f'{str(image.created.strftime("%Y-%m-%d %H:%M:%S")):22s}'
            f'{str(image.firmware):15s}{str(image.parent):20s}')

    def _load_images(self):
        '''Load the images from the file.'''
        try:
            with open(self._images_file, 'r') as f:
                jsonlist = json.loads(f.read())
        except Exception:
            jsonlist = {}
        # Transform the dictionary of images to Images
        self._images = {image['name']: Image.fromdict(image)
            for image in jsonlist}

    def _save_images(self):
        '''Save the list of images to the file.'''
        partfile = self._images_file + '.part'
        with open(partfile, 'w') as f:
            f.write(json.dumps([x.todict() for x in self._images.values()]))
        os.rename(partfile, self._images_file)

    def _register_executable(self):
        '''Register the arm executable with qemu.'''
        try:
            with open('/proc/sys/fs/binfmt_misc/register', 'w') as f:
                f.write(self._ARM_EXEC_TAG)
        except FileExistsError:
            pass

    def _copy_dns_info(self, image):
        '''Copy the host's DNS info to the image.'''
        src = '/etc/resolv.conf'
        dst = os.path.join(image.rootpath, 'etc', 'resolv.conf')
        shutil.copy(src, dst)

    def _partition(self, device):
        '''Partition the device to prepare it for the image files.'''
        _info(f'partitioning {device}')
        cmd = ['parted', '-a', 'optimal', '--script', device,
            'mklabel', 'msdos',
            'unit', 'mib',
            'mkpart', 'primary', 'fat32', '1', '65',
            'mkpart', 'primary', 'linux-swap', '65', '577',
            'mkpart', 'primary', '577', '100%']
        p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if p.returncode:
            raise RuntimeError(f'cannot partition device {device}: '
                f'{p.stderr.decode("utf-8").strip()}')

        subprocess.run(
            ['partprobe'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def _create_filesystems(self, device):
        '''Create the boot and root filesystems in device and setup swap.'''
        _info('creating boot filesystem')
        cmd = ['mkfs.fat', '-F', '32', f'{device}1']
        p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if p.returncode:
            raise RuntimeError(f'cannot create boot filesystem: '
                f'{p.stderr.decode("utf-8").strip()}')

        _info('creating root filesystem')
        cmd = ['mkfs.f2fs', '-f', f'{device}3']
        p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if p.returncode:
            _info(f'cannot create root F2FS filesystem: '
                f'{p.stderr.decode("utf-8").strip()}')
            _info('trying with EXT4')
            cmd = ['mkfs.ext4', '-T', 'small', f'{device}3']
            p = subprocess.run(
                cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            if p.returncode:
                raise RuntimeError(
                    f'cannot create root EXT4 filesystem: '
                        f'{p.stderr.decode("utf-8").strip()}')

        _info('setting up swap space')
        cmd = ['mkswap', '-f', f'{device}2']
        p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if p.returncode:
            raise RuntimeError(f'cannot create swap space: '
                f'{p.stderr.decode("utf-8").strip()}')

    def _copy_files(self, image, bootdir, rootdir):
        '''Copy the files from the image to the physical directories.'''
        _info('copying boot files')
        self._copy_contents(image.bootpath, bootdir)

        _info('copying root files')
        self._copy_contents(image.rootpath, rootdir)

        _info('syncing')
        os.sync()

    def _copy_contents(self, src, dst):
        '''Copy the contents of the directory src into the directory dst.'''
        for x in os.listdir(src):
            f = os.path.join(src, x)
            if os.path.isdir(f):
                shutil.copytree(f, os.path.join(dst, x), symlinks=True)
            else:
                shutil.copy2(f, dst, follow_symlinks=False)

class Image:
    '''An image.'''

    _ARCHS = ['armv6j', 'armv7a', 'aarch64']

    def __init__(
            self, name, arch, path, created=datetime.datetime.now(),
            firmware=None, parent=None):
        self.name = name
        # Check that the given arch is a valid one
        if arch not in self._ARCHS:
            raise ValueError(f"unknown architecture '{arch}'")
        else:
            self.arch = arch
        if isinstance(created, datetime.datetime):
            self.created = created
        else:
            self.created = datetime.datetime.fromtimestamp(created)
        self.path = path
        self.firmware = firmware
        self.parent = parent

    @property
    def bootpath(self):
        '''Return the directory to the boot files of this image.'''
        return os.path.join(self.path, 'boot')

    @property
    def rootpath(self):
        '''Return the directory to the root files of this image.'''
        return os.path.join(self.path, 'root')

    @property
    def portagedir(self):
        '''Return the portage dir of this image.'''
        # Create the directory if it doesn't exist
        path = os.path.join(self.rootpath, 'var', 'db', 'repos', 'gentoo')
        if not os.path.exists(path):
            os.mkdir(path)
        return path

    @property
    def distfilesdir(self):
        '''Return the distfiles dir of this image.'''
        path = os.path.join(self.rootpath, 'var', 'cache', 'distfiles')
        if not os.path.exists(path):
            os.mkdir(path)
        return path

    @property
    def binpkgdir(self):
        '''Return the binpkg dir of this image.'''
        path = os.path.join(self.rootpath, 'var', 'cache', 'binpkgs')
        if not os.path.exists(path):
            os.mkdir(path)
        return path

    @classmethod
    def fromdict(cls, dictionary):
        '''Create an Image from a dictionary.'''
        return Image(**dictionary)

    def clone(self):
        '''Return a copy of this image.'''
        return Image(self.name, self.arch, self.path, firmware=self.firmware,
            parent=self.name)

    def mkdirs(self):
        '''Create the directories of this image.'''
        os.mkdir(self.path)
        os.mkdir(self.bootpath)
        os.mkdir(self.rootpath)

    def remove(self):
        '''Remove the directories of this image.'''
        shutil.rmtree(self.path)

    def rename(self, newname, rename_path=False):
        '''Rename this image with the new name.'''
        self.name = newname
        oldpath = self.path
        head, tail = os.path.split(self.path)
        self.path = os.path.join(head, self.name)
        if rename_path:
            os.rename(oldpath, self.path)

    def set_firmware_version(self, version):
        '''Set the firmware version installed in this image.'''
        self.firmware = version

    def todict(self):
        '''Return a dictionary with the Image attributes.'''
        return {'name': self.name, 'arch': self.arch, 'path': self.path,
            'created': self.created.timestamp(), 'firmware': self.firmware,
            'parent': self.parent}

class RpiFiles:
    '''Manage Raspberry PI files.'''

    _FW_REPO = 'https://github.com/raspberrypi/firmware'

    # TODO: remove git, use releases

    def __init__(self, path):
        self._path = path
        self._git_fw = Git(self._FW_REPO)

    def install_firmware(self, path, download=True):
        '''Install the Raspberry PI firmware to the given path.'''
        # Download more recent tag, if necessary
        self._download(download)

        # Install the firmware to the given path
        _info('installing firmware')
        bootdir = os.path.join(self._path, 'boot')
        shutil.copytree(bootdir, path, dirs_exist_ok=True)

    def install_modules(self, path):
        '''Intall the modules that come with the firmware to the given path.'''
        _info('installing kernel modules')
        src = os.path.join(self._path, 'modules')
        dst = os.path.join(path, 'lib', 'modules')
        shutil.copytree(src, dst)

    @property
    def current_firmware(self):
        '''Return the tag of the current downloaded firmware.'''
        headfile = os.path.join(self._path, '.git', 'HEAD')
        tagfile = os.path.join(self._path, 'tag')
        try:
            with open(headfile, 'r') as f:
                id_ = f.read().strip()
            with open(tagfile, 'r') as f:
                tag = f.read().strip()
            return tag, id_
        except IOError:
            return None, None

    def _download(self, download):
        '''Check the last tag in the repository.'''
        # Check current tag/id
        currenttag, currentid = self.current_firmware
        _info(f'current firmware: {currenttag}')

        # Get last tag/id
        lasttag, lastid = self._git_fw.lasttag()
        _info(f'last firmware: {lasttag}')

        if download or currenttag is None:
            if lastid == currentid:
                _info('firmware up to date')
            download = (lastid != currentid)

        # Download more recent tag
        if download:
            try:
                with tempfile.TemporaryDirectory() as tmp:
                    _info(f'cloning firmware {lasttag}')
                    self._git_fw.clone(dst=tmp, depth=1, branch=lasttag)

                    # Replace the current firmware
                    try:
                        shutil.rmtree(self._path)
                    except OSError: pass
                    shutil.move(tmp, self._path)

                    # Write the tag
                    with open(os.path.join(self._path, 'tag'), 'w') as f:
                        f.write(lasttag)
            except Exception as e:
                raise IOError(f'cannot download firmware: {e}')

class GentooFiles:
    '''Manage Gentoo files.'''

    _BASEURL = 'https://gentoo.osuosl.org/releases/arm/autobuilds/'
    _DIRURL = _BASEURL + 'current-stage3-{}/'
    _FILEURL = _DIRURL + '{}'
    _PORTAGEURL = 'https://gentoo.osuosl.org/snapshots/gentoo-latest.tar.xz'

    def __init__(self, path):
        self._path = path

    @property
    def portagedir(self):
        '''Return the directory with the portage tree.'''
        portage = os.path.join(self._path, 'portage')
        if not os.path.exists(portage):
            self._download_portage()
        portage = os.path.join(portage, os.listdir(portage)[0])
        return portage

    @property
    def distfilesdir(self):
        '''Return the directory with the distributed files.'''
        distfiles = os.path.join(self._path, 'distfiles')
        if not os.path.exists(distfiles):
            os.mkdir(distfiles)
        return distfiles

    @property
    def binpkgdir(self):
        '''Return the directory with the bin packages.'''
        binpkg = os.path.join(self._path, 'binpkg')
        if not os.path.exists(binpkg):
            os.mkdir(binpkg)
        return binpkg

    def install_stage3(self, arch, path, download=True):
        '''Install the stage3 files.'''
        # Download more recent version, if necessary
        self._download_stage3(arch, download)

        # Extract the stage to the given path
        current = self._current_stage3(arch)
        _info(f'extracting stage3 {current}')
        cmd = ['tar', 'xpf', os.path.join(self._path, current), '-C', path]
        p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if p.returncode:
            raise RuntimeError(
                f'cannot extract stage3: {p.stderr.decode("utf-8").strip()}')

    def _current_stage3(self, arch):
        '''Return the current localy available stage3 version for the given
        arch.
        '''
        files = glob.glob(os.path.join(
            self._path, f'stage3-{arch}_hardfp-*.tar.*'))
        if files:
            return os.path.basename(files[0])
        return None

    def _download_stage3(self, arch, download):
        '''Download the latest stage3 for the given architecture, if necessary.
        '''
        # Check the current stage3
        current = self._current_stage3(arch)
        _info(f'current stage3: {current}')

        # Check the latest stage3
        latest = self._latest_stage3(arch)
        _info(f'latest stage3: {latest}')

        # Get the latest version number
        if download or current is None:
            if current == latest:
                _info('stage3 up to date')
            download = (latest != current)

        if download:
            # Create the target directory if it doesn't exist
            if not os.path.exists(self._path):
                os.mkdir(self._path)

            url = self._FILEURL.format(arch, latest)
            _info(f'downloading stage3 {latest}')
            dstfile = os.path.join(self._path, latest)
            self._download_file(url, dstfile)

            # Remove the old file, if any
            if current is not None:
                os.unlink(os.path.join(self._path, current))

    def _latest_stage3(self, arch):
        '''Get the latest stage3 version number.'''
        with urllib.request.urlopen(self._DIRURL.format(arch)) as u:
            contents = u.read()
        soup = bs4.BeautifulSoup(contents, 'html.parser')
        a = soup.find('a', href=re.compile(
            f'stage3-{arch}_hardfp-\d+T\d+Z.tar'))
        return a.text        

    def _download_portage(self):
        '''Download the latest portage tree.'''
        _info('downloading portage tree')
        with tempfile.TemporaryDirectory() as tmp:
            dstfile = os.path.join(tmp, self._PORTAGEURL.split('/')[-1])
            self._download_file(self._PORTAGEURL, dstfile)

            # Extract the portage tree to the given path
            portagepath = os.path.join(self._path, 'portage')
            os.mkdir(portagepath)
            cmd = ['tar', 'xpf', dstfile, '-C', portagepath]
            p = subprocess.run(
                cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            if p.returncode:
                raise RuntimeError(f'cannot extract portage snapshot: '
                    f'{p.stderr.decode("utf-8").strip()}')

    def _download_file(self, url, dstfile):
        '''Download a file.'''
        with urllib.request.urlopen(url) as u:
            # Download the file to a temporary file
            partfile = dstfile + '.part'
            with open(partfile, 'wb') as f:
                while 1:
                    chunk = u.read(4096)
                    if chunk:
                        f.write(chunk)
                    else:
                        break

        # Remove the old file, if any
        try:
            os.unlink(dstfile)
        except OSError: pass

        # Rename the downloaded file to the final name
        os.rename(partfile, dstfile)

class Git:
    '''Clone git repos.'''

    def __init__(self, repo):
        self._repo = repo

    def clone(self, dst, depth=None, branch=None):
        '''Clone the git repository.'''
        cmd = ['git', 'clone']
        if depth is not None:
            cmd.extend(['--depth', str(depth)])
        if branch is not None:
            cmd.extend(['--branch', branch])
        cmd.append(self._repo)
        cmd.append(dst)
        p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if p.returncode:
           raise RuntimeError(f"cannot clone repo '{self._repo}': "
                f"{p.stderr.decode('utf-8').strip()}")

    def lasttag(self):
        '''Return the last tag of this repo.'''
        cmd = ['git', '-c', 'versionsort.suffix=-', 'ls-remote', '--tags',
            '--sort', 'v:refname', self._repo]
        p = subprocess.run(cmd, stdout=subprocess.PIPE, encoding='ascii')
        if p.returncode:
            raise RuntimeError(f"cannot get lasttag of repo '{self._repo}'")
        lastline = p.stdout.splitlines()[-1]
        id_, other = lastline.split('\t')
        tag = other.split('/')[-1]
        return tag, id_

class Mount:
    '''Mount a filesystem.'''

    def __init__(self, filesystem, path, options=None, type=None, lazy=False):
        self._filesystem = filesystem
        self._path = path
        self._options = options
        self._type = type
        self._lazy = lazy

    def __enter__(self):
        '''Mount the filesystem.'''
        # Prepare the command
        cmd = ['mount']
        if self._options is not None:
            cmd.extend(['-o', ','.join(self._options)])
        if self._type is not None:
            cmd.extend(['-t', self._type])
        cmd.extend([self._filesystem, self._path])

        # Run the command
        p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if p.returncode:
            raise RuntimeError(f"unable to mount '{self._filesystem}': "
                f"{p.stderr.encode('utf-8').strip()}")

    def __exit__(self, *args):
        '''Umount the filesystem.'''
        # Prepare the command
        cmd = ['umount', self._path]
        if self._lazy:
            cmd.append('-l')

        # Run the command
        p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if p.returncode:
            raise RuntimeError(f"unable to unmount '{self._path}': "
                f"{p.stderr.encode('utf-8').strip()}")

if __name__ == '__main__':
    Application().main()

